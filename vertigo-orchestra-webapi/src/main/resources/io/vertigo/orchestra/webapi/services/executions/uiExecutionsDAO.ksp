package io.vertigo.orchestra.webapi.dao.uiexecutions


create Task TK_GET_EXECUTION_BY_PRE_ID {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select  pre.PRE_ID as PRE_ID,
        			pre.BEGIN_TIME as BEGIN_TIME,
        			pre.END_TIME as END_TIME,
        			round(extract('epoch' from (pre.END_TIME-pre.BEGIN_TIME))) as EXECUTION_TIME,
        			pre.EST_CD as STATUS
        	from o_process_execution pre   
        	where pre.PRE_ID = #PRE_ID#     	
			"
	attribute PRE_ID	 	{domain : DO_O_IDENTIFIANT		notNull:"true" 	inOut :"in"}
	attribute DT_O_PROCESS_EXECUTION_UI	 	{domain : DO_DT_O_PROCESS_EXECUTION_UI_DTO		notNull:"true" 	inOut :"out"}
}


create Task TK_GET_EXECUTIONS_BY_PROCESS_NAME {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select  pre.PRE_ID as PRE_ID,
        			pre.BEGIN_TIME as BEGIN_TIME,
        			pre.END_TIME as END_TIME,
        			round(extract('epoch' from (pre.END_TIME-pre.BEGIN_TIME))) as EXECUTION_TIME,
        			pre.EST_CD as STATUS
        	from o_process pro
        	join o_process_execution pre on pro.PRO_ID = pre.PRO_ID
        	where pro.NAME = #NAME#
        	order by pre.begin_time desc
        	limit #LIMIT#
        	offset #OFFSET#
        	
			"
	attribute NAME	 	{domain : DO_O_LIBELLE		notNull:"true" 	inOut :"in"}
	attribute LIMIT	 	{domain : DO_O_NOMBRE		notNull:"true" 	inOut :"in"}
	attribute OFFSET	 	{domain : DO_O_NOMBRE		notNull:"true" 	inOut :"in"}
	attribute DTC_O_PROCESS_EXECUTION_UI	 	{domain : DO_DT_O_PROCESS_EXECUTION_UI_DTC		notNull:"true" 	inOut :"out"}
}


create Task TK_GET_ACTIVITIY_BY_ACE_ID {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select  ace.ACE_ID as ACE_ID,
        			act.LABEL as LABEL,
        			ace.BEGIN_TIME as BEGIN_TIME,
        			ace.END_TIME as END_TIME,
        			round(extract('epoch' from (ace.END_TIME-ace.BEGIN_TIME))) as EXECUTION_TIME,
        			ace.EST_CD as STATUS,
        			max((case when acw.IS_IN is true then acw.WORKSPACE else null end)) as WORKSPACE_IN,
        			max((case when acw.IS_IN is false then acw.WORKSPACE else null end)) as WORKSPACE_OUT
        	from o_activity_execution ace
        	join o_activity act on act.ACT_ID = ace.ACT_ID
        	join o_activity_workspace acw on acw.ACE_ID = ace.ACE_ID
        	where ace.ACE_ID = #ACE_ID#
        	group by ace.ACE_ID, act.LABEL, ace.BEGIN_TIME, ace.END_TIME
        	
			"
	attribute ACE_ID	 	{domain : DO_O_IDENTIFIANT		notNull:"true" 	inOut :"in"}
	attribute DT_O_ACTIVITY_EXECUTION_UI	 	{domain : DO_DT_O_ACTIVITY_EXECUTION_UI_DTO		notNull:"true" 	inOut :"out"}
}

create Task TK_GET_ACTIVITIES_BY_PRE_ID {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select  ace.ACE_ID as ACE_ID,
        			act.LABEL as LABEL,
        			ace.BEGIN_TIME as BEGIN_TIME,
        			ace.END_TIME as END_TIME,
        			round(extract('epoch' from (ace.END_TIME-ace.BEGIN_TIME))) as EXECUTION_TIME,
        			ace.EST_CD as STATUS
        	from o_activity_execution ace
        	join o_activity act on act.ACT_ID = ace.ACT_ID
        	where ace.PRE_ID = #PRE_ID#
        	order by ace.begin_time asc
        	
			"
	attribute PRE_ID	 	{domain : DO_O_IDENTIFIANT		notNull:"true" 	inOut :"in"}
	attribute DTC_O_ACTIVITY_EXECUTION_UI	 	{domain : DO_DT_O_ACTIVITY_EXECUTION_UI_DTC		notNull:"true" 	inOut :"out"}
}